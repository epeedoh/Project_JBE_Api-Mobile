// <auto-generated />
using System;
using Jbl.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Jbl.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210623003028_UpdateModel")]
    partial class UpdateModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Jbl.API.Data.JoueurNiveauScore", b =>
                {
                    b.Property<int>("JoueurNiveauScoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NiveauID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<int>("ThemeID")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurID")
                        .HasColumnType("int");

                    b.HasKey("JoueurNiveauScoreID");

                    b.HasIndex("NiveauID");

                    b.HasIndex("StageID");

                    b.HasIndex("ThemeID");

                    b.HasIndex("UtilisateurID");

                    b.ToTable("JoueurNiveauScores");
                });

            modelBuilder.Entity("Jbl.API.Data.Niveau", b =>
                {
                    b.Property<int>("NiveauID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("IdJoueur")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThemeID")
                        .HasColumnType("int");

                    b.HasKey("NiveauID");

                    b.HasIndex("ThemeID");

                    b.ToTable("Niveaux");
                });

            modelBuilder.Entity("Jbl.API.Data.Pays", b =>
                {
                    b.Property<int>("PaysID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Capital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodePays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationalite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaysID");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("Jbl.API.Data.Personne", b =>
                {
                    b.Property<int>("PersonneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CodeSexe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CompteCreate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Domicile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifiant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomComplet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaysID")
                        .HasColumnType("int");

                    b.Property<string>("Prenoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleTypeID")
                        .HasColumnType("int");

                    b.Property<int>("SexeID")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonneID");

                    b.HasIndex("PaysID");

                    b.HasIndex("RoleTypeID");

                    b.HasIndex("SexeID");

                    b.ToTable("Personnes");
                });

            modelBuilder.Entity("Jbl.API.Data.PropositionReponse", b =>
                {
                    b.Property<int>("PropositionReponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("PropositionReponseID");

                    b.HasIndex("QuestionID");

                    b.ToTable("PropositionReponses");
                });

            modelBuilder.Entity("Jbl.API.Data.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NiveauID")
                        .HasColumnType("int");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("TotalPointQuestionnaire")
                        .HasColumnType("int");

                    b.HasKey("QuestionID");

                    b.HasIndex("NiveauID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Jbl.API.Data.Reponse", b =>
                {
                    b.Property<int>("ReponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("ReponseID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Reponses");
                });

            modelBuilder.Entity("Jbl.API.Data.RoleType", b =>
                {
                    b.Property<int>("RoleTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CodeRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeTitre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UtilisateurID")
                        .HasColumnType("int");

                    b.HasKey("RoleTypeID");

                    b.HasIndex("UtilisateurID");

                    b.ToTable("RoleTypes");
                });

            modelBuilder.Entity("Jbl.API.Data.Sexe", b =>
                {
                    b.Property<int>("SexeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CodeSexe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SexeID");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("Jbl.API.Data.Stage", b =>
                {
                    b.Property<int>("StageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CodeStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StageID");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Jbl.API.Data.Theme", b =>
                {
                    b.Property<int>("ThemeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CodeTheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeThemeSuivant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("StageID")
                        .HasColumnType("int");

                    b.Property<string>("ThemeActiveBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThemeID");

                    b.HasIndex("StageID");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("Jbl.API.Data.Utilisateur", b =>
                {
                    b.Property<int>("UtilisateurID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PersonneID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UtilisateurID");

                    b.HasIndex("PersonneID");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("Jbl.API.Data.JoueurNiveauScore", b =>
                {
                    b.HasOne("Jbl.API.Data.Niveau", "Niveau")
                        .WithMany()
                        .HasForeignKey("NiveauID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jbl.API.Data.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jbl.API.Data.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jbl.API.Data.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Niveau");

                    b.Navigation("Stage");

                    b.Navigation("Theme");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Jbl.API.Data.Niveau", b =>
                {
                    b.HasOne("Jbl.API.Data.Theme", "Theme")
                        .WithMany("Niveaux")
                        .HasForeignKey("ThemeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Jbl.API.Data.Personne", b =>
                {
                    b.HasOne("Jbl.API.Data.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jbl.API.Data.RoleType", null)
                        .WithMany("Personnes")
                        .HasForeignKey("RoleTypeID");

                    b.HasOne("Jbl.API.Data.Sexe", "Sexe")
                        .WithMany("Personnes")
                        .HasForeignKey("SexeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pays");

                    b.Navigation("Sexe");
                });

            modelBuilder.Entity("Jbl.API.Data.PropositionReponse", b =>
                {
                    b.HasOne("Jbl.API.Data.Question", "Question")
                        .WithMany("PropositionReponses")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Jbl.API.Data.Question", b =>
                {
                    b.HasOne("Jbl.API.Data.Niveau", "Niveau")
                        .WithMany("Questions")
                        .HasForeignKey("NiveauID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Niveau");
                });

            modelBuilder.Entity("Jbl.API.Data.Reponse", b =>
                {
                    b.HasOne("Jbl.API.Data.Question", "Question")
                        .WithMany("Reponses")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Jbl.API.Data.RoleType", b =>
                {
                    b.HasOne("Jbl.API.Data.Utilisateur", null)
                        .WithMany("UtilisateurRoles")
                        .HasForeignKey("UtilisateurID");
                });

            modelBuilder.Entity("Jbl.API.Data.Theme", b =>
                {
                    b.HasOne("Jbl.API.Data.Stage", "Stage")
                        .WithMany("Themes")
                        .HasForeignKey("StageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Jbl.API.Data.Utilisateur", b =>
                {
                    b.HasOne("Jbl.API.Data.Personne", "Personne")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("PersonneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personne");
                });

            modelBuilder.Entity("Jbl.API.Data.Niveau", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Jbl.API.Data.Personne", b =>
                {
                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("Jbl.API.Data.Question", b =>
                {
                    b.Navigation("PropositionReponses");

                    b.Navigation("Reponses");
                });

            modelBuilder.Entity("Jbl.API.Data.RoleType", b =>
                {
                    b.Navigation("Personnes");
                });

            modelBuilder.Entity("Jbl.API.Data.Sexe", b =>
                {
                    b.Navigation("Personnes");
                });

            modelBuilder.Entity("Jbl.API.Data.Stage", b =>
                {
                    b.Navigation("Themes");
                });

            modelBuilder.Entity("Jbl.API.Data.Theme", b =>
                {
                    b.Navigation("Niveaux");
                });

            modelBuilder.Entity("Jbl.API.Data.Utilisateur", b =>
                {
                    b.Navigation("UtilisateurRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
