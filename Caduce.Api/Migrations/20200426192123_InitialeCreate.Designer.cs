// <auto-generated />
using System;
using Caduce.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Caduce.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200426192123_InitialeCreate")]
    partial class InitialeCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Caduce.Api.Models.ActeMedical", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActeTypeId");

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateCreation");

                    b.Property<string>("Description");

                    b.Property<string>("Libelle");

                    b.HasKey("Id");

                    b.HasIndex("ActeTypeId");

                    b.ToTable("ActeMedicals");
                });

            modelBuilder.Entity("Caduce.Api.Models.ActeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateCreation");

                    b.Property<string>("Libelle");

                    b.HasKey("Id");

                    b.ToTable("ActeTypes");
                });

            modelBuilder.Entity("Caduce.Api.Models.Constante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeEntreprise");

                    b.Property<Guid>("ConsultationId");

                    b.Property<DateTime>("DateCreation");

                    b.Property<decimal>("Diurese");

                    b.Property<bool>("EstActif");

                    b.Property<decimal>("FrequenceRespiratoire");

                    b.Property<string>("NumeroPatient");

                    b.Property<Guid>("PatientId");

                    b.Property<decimal>("Poids");

                    b.Property<Guid>("PrestationId");

                    b.Property<decimal>("Pulsation");

                    b.Property<decimal>("Selles");

                    b.Property<decimal>("Taille");

                    b.Property<decimal>("Temperature");

                    b.Property<string>("TensionArterielle");

                    b.Property<string>("Test");

                    b.Property<Guid>("UtilisateurId");

                    b.Property<string>("numeroConsultation");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrestationId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Constantes");
                });

            modelBuilder.Entity("Caduce.Api.Models.Consultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreation");

                    b.Property<bool>("EstActif");

                    b.Property<Guid>("PatientId");

                    b.Property<Guid>("PrestationId");

                    b.Property<Guid>("UtilisateurId");

                    b.Property<string>("numeroConsultation");

                    b.Property<string>("praticien");

                    b.Property<Guid>("praticienId");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrestationId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("Caduce.Api.Models.Entreprise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Addresse");

                    b.Property<string>("CodeEntreprise");

                    b.Property<string>("CodePays");

                    b.Property<string>("Commune");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Nom");

                    b.Property<int>("PaysId");

                    b.Property<Guid>("PersonneId");

                    b.Property<string>("TelephoneFixe");

                    b.Property<string>("TelephoneMobile");

                    b.Property<string>("Ville");

                    b.HasKey("Id");

                    b.HasIndex("PaysId");

                    b.HasIndex("PersonneId");

                    b.ToTable("Entreprises");
                });

            modelBuilder.Entity("Caduce.Api.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeEntreprise");

                    b.Property<DateTime>("DateEnregistrement");

                    b.Property<Guid>("EntrepriseId");

                    b.Property<string>("NumeroPatient");

                    b.Property<Guid>("PersonneId");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("PersonneId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Caduce.Api.Models.Pays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Capital");

                    b.Property<string>("CodePays");

                    b.Property<byte[]>("Image");

                    b.Property<string>("Libelle");

                    b.Property<string>("Nationalite");

                    b.HasKey("Id");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("Caduce.Api.Models.Personne", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeProfession");

                    b.Property<string>("CodeRegion");

                    b.Property<string>("CodeSexe");

                    b.Property<bool>("CompteCreate");

                    b.Property<DateTime>("DateCreation");

                    b.Property<DateTime>("DateNaissance");

                    b.Property<string>("Domicile");

                    b.Property<string>("Identifiant");

                    b.Property<byte[]>("Image");

                    b.Property<string>("Nom");

                    b.Property<string>("NomComplet");

                    b.Property<int>("PaysId");

                    b.Property<string>("Prenoms");

                    b.Property<int>("ProfessionId");

                    b.Property<int>("RegionId");

                    b.Property<Guid?>("RoleTypeId");

                    b.Property<int>("SexeId");

                    b.Property<string>("Telephone");

                    b.HasKey("Id");

                    b.HasIndex("PaysId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("RegionId");

                    b.HasIndex("RoleTypeId");

                    b.HasIndex("SexeId");

                    b.ToTable("Personnes");
                });

            modelBuilder.Entity("Caduce.Api.Models.Prestation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActeMedicalEntrepriseId");

                    b.Property<Guid>("AssureurPersonneId");

                    b.Property<DateTime>("DateCreation");

                    b.Property<Guid>("EntrepriseId");

                    b.Property<bool>("EstActif");

                    b.Property<decimal>("MontantPayer");

                    b.Property<decimal>("PartAssurance");

                    b.Property<Guid>("PatientId");

                    b.Property<Guid>("ServiceMedicalId");

                    b.Property<decimal>("Solde");

                    b.Property<Guid>("UtilisateurId");

                    b.Property<decimal>("cout");

                    b.Property<string>("libelle");

                    b.Property<string>("numeroPatient");

                    b.Property<string>("numeroPrestation");

                    b.Property<string>("praticien");

                    b.Property<Guid>("praticienId");

                    b.Property<decimal>("prixTotal");

                    b.Property<decimal>("quantite");

                    b.Property<string>("service");

                    b.Property<decimal>("ticketModerateur");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Prestations");
                });

            modelBuilder.Entity("Caduce.Api.Models.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeProfession");

                    b.Property<DateTime>("DateCreation");

                    b.Property<string>("Libelle");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Caduce.Api.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChefLieu");

                    b.Property<string>("CodePays");

                    b.Property<string>("CodeRegion");

                    b.Property<DateTime>("DateCreation");

                    b.Property<string>("Libelle");

                    b.Property<int>("PaysId");

                    b.HasKey("Id");

                    b.HasIndex("PaysId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Caduce.Api.Models.RoleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeRole");

                    b.Property<string>("CodeTitre");

                    b.Property<DateTime>("DateCreation");

                    b.Property<string>("Libelle");

                    b.HasKey("Id");

                    b.ToTable("RoleTypes");
                });

            modelBuilder.Entity("Caduce.Api.Models.Sexe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeSexe");

                    b.Property<DateTime>("DateCreation");

                    b.Property<string>("Libelle");

                    b.HasKey("Id");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("Caduce.Api.Models.StatutConsultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeStatut");

                    b.Property<Guid>("ConsultationId");

                    b.Property<DateTime>("DateCreation");

                    b.Property<bool>("EstActif");

                    b.Property<string>("NumeroConsultation");

                    b.Property<DateTime>("PeriodeDebut");

                    b.Property<DateTime?>("PeriodeFin");

                    b.Property<string>("Statut");

                    b.Property<Guid>("TypeStatutConsultationId");

                    b.Property<Guid>("UtilisateurId");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("TypeStatutConsultationId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("StatutConsultations");
                });

            modelBuilder.Entity("Caduce.Api.Models.StatutPrestation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeStatut");

                    b.Property<DateTime>("DateCreation");

                    b.Property<bool>("EstActif");

                    b.Property<DateTime>("PeriodeDebut");

                    b.Property<DateTime?>("PeriodeFin");

                    b.Property<Guid>("PrestationId");

                    b.Property<string>("Statut");

                    b.Property<Guid>("TypeStatutPrestationId");

                    b.Property<Guid>("UtilisateurId");

                    b.HasKey("Id");

                    b.HasIndex("PrestationId");

                    b.HasIndex("TypeStatutPrestationId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("StatutPrestations");
                });

            modelBuilder.Entity("Caduce.Api.Models.TypeStatutConsultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateCreation");

                    b.Property<bool>("EstActif");

                    b.Property<string>("Libelle");

                    b.HasKey("Id");

                    b.ToTable("TypeStatutConsultations");
                });

            modelBuilder.Entity("Caduce.Api.Models.TypeStatutPrestation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateCreation");

                    b.Property<bool>("EstActif");

                    b.Property<string>("Libelle");

                    b.HasKey("Id");

                    b.ToTable("TypeStatutPrestations");
                });

            modelBuilder.Entity("Caduce.Api.Models.Utilisateur", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeEntreprise");

                    b.Property<Guid>("EntrepriseId");

                    b.Property<byte[]>("Image");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<Guid>("PersonneId");

                    b.Property<string>("Username");

                    b.HasKey("id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("PersonneId");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("Caduce.Api.Models.UtilisateurRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeRole");

                    b.Property<DateTime>("DateCreation");

                    b.Property<DateTime>("DateDebut");

                    b.Property<DateTime>("DateFin");

                    b.Property<bool>("EstActif");

                    b.Property<Guid>("RoleTypeId");

                    b.Property<Guid>("UsercreateId");

                    b.Property<Guid>("UtilisateurId");

                    b.HasKey("Id");

                    b.HasIndex("RoleTypeId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("UtilisateurRoles");
                });

            modelBuilder.Entity("Caduce.Api.Models.ActeMedical", b =>
                {
                    b.HasOne("Caduce.Api.Models.ActeType", "acteType")
                        .WithMany("ActeMedical")
                        .HasForeignKey("ActeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.Constante", b =>
                {
                    b.HasOne("Caduce.Api.Models.Consultation", "consultation")
                        .WithMany("constantes")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Prestation", "prestation")
                        .WithMany()
                        .HasForeignKey("PrestationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Utilisateur", "utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.Consultation", b =>
                {
                    b.HasOne("Caduce.Api.Models.Patient", "patient")
                        .WithMany("consultations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Prestation", "prestation")
                        .WithMany("consultations")
                        .HasForeignKey("PrestationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Utilisateur", "utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.Entreprise", b =>
                {
                    b.HasOne("Caduce.Api.Models.Pays", "pays")
                        .WithMany("entreprise")
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Personne", "personne")
                        .WithMany("entreprises")
                        .HasForeignKey("PersonneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.Patient", b =>
                {
                    b.HasOne("Caduce.Api.Models.Entreprise", "entreprise")
                        .WithMany("patients")
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Personne", "personne")
                        .WithMany("patients")
                        .HasForeignKey("PersonneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.Personne", b =>
                {
                    b.HasOne("Caduce.Api.Models.Pays", "pays")
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Profession", "Profession")
                        .WithMany("personnes")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Region", "region")
                        .WithMany("personne")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.RoleType")
                        .WithMany("personnes")
                        .HasForeignKey("RoleTypeId");

                    b.HasOne("Caduce.Api.Models.Sexe", "sexe")
                        .WithMany("personnes")
                        .HasForeignKey("SexeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.Prestation", b =>
                {
                    b.HasOne("Caduce.Api.Models.Entreprise", "entreprise")
                        .WithMany("Prestations")
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Patient", "patient")
                        .WithMany("prestations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Utilisateur", "utilisateur")
                        .WithMany("Prestations")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.Region", b =>
                {
                    b.HasOne("Caduce.Api.Models.Pays", "pays")
                        .WithMany("regions")
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.StatutConsultation", b =>
                {
                    b.HasOne("Caduce.Api.Models.Consultation", "consultation")
                        .WithMany("statutConsultations")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.TypeStatutConsultation", "typeStatutConsultation")
                        .WithMany("statutConsultations")
                        .HasForeignKey("TypeStatutConsultationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Utilisateur", "utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.StatutPrestation", b =>
                {
                    b.HasOne("Caduce.Api.Models.Prestation", "prestation")
                        .WithMany("statutPrestations")
                        .HasForeignKey("PrestationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.TypeStatutPrestation", "typeStatutPrestation")
                        .WithMany("statutPrestations")
                        .HasForeignKey("TypeStatutPrestationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Utilisateur", "utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.Utilisateur", b =>
                {
                    b.HasOne("Caduce.Api.Models.Entreprise", "entreprise")
                        .WithMany("utilisateurs")
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Personne", "personne")
                        .WithMany("utilisateurs")
                        .HasForeignKey("PersonneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Caduce.Api.Models.UtilisateurRoles", b =>
                {
                    b.HasOne("Caduce.Api.Models.RoleType", "roleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Caduce.Api.Models.Utilisateur", "utilisateur")
                        .WithMany("utilisateurRoles")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
